CLIENTE
{
  "nome": "Nome do Cliente",
  "endereco_entrega": {
    "rua": "Rua do Cliente",
    "numero": "Número do Cliente",
    "complemento": "Complemento do Cliente",
    "cidade": "Cidade do Cliente",
    "estado": "Estado do Cliente",
    "cep": "CEP do Cliente"
  },
  "telefone": "Telefone do Cliente"
}
PEDIDO
{
  "cliente_id": "ID do Cliente",
  "data_hora": "Data e Hora do Pedido",
  "tipo_entrega": "Tipo de Entrega (entrega ou local)",
  "numero_mesa": "Número da Mesa (para pedidos locais)",
  "itens": [
    {
      "tipo": "Tipo do Item (pizza ou bebida)",
      "nome": "Nome do Item",
      "quantidade": "Quantidade do Item",
      "preco_unitario": "Preço Unitário do Item"
    },
    {
      "tipo": "Tipo do Item (pizza ou bebida)",
      "nome": "Nome do Item",
      "quantidade": "Quantidade do Item",
      "preco_unitario": "Preço Unitário do Item"
    },
    ... 
  ]
}
PIZZA
{
    "nome": "Nome da Pizza",
    "tamanho": "Tamanho da Pizza (pequena, média, grande)",
    "preco_unitario": "Preço Unitário da Pizza",
    "quantidade": "Quantidade de Pizzas"
  }
  
  BEBIDA
  
  {
    "nome": "Nome da Bebida",
    "preco_unitario": "Preço Unitário da Bebida",
    "quantidade": "Quantidade de Bebidas"
  }


  Comandos MongoDB para criar as coleções e inserir os dados.

  db.clientes.insertMany([
    /*{
      "nome": "João Silva",
      "endereco_entrega": {
        "rua": "Rua A",
        "numero": "123",
        "complemento": "Apto 4",
        "cidade": "São Paulo",
        "estado": "SP",
        "cep": "01234-567"
      },
      "telefone": "(11) 9876-5432"
    },
    {
      "nome": "Maria Souza",
      "endereco_entrega": {
        "rua": "Avenida B",
        "numero": "456",
        "complemento": "Casa 2",
        "cidade": "Rio de Janeiro",
        "estado": "RJ",
        "cep": "21000-123"
      },
      "telefone": "(21) 1234-5678"
    },
    {
      "nome": "Carlos Santos",
      "endereco_entrega": {
        "rua": "Rua C",
        "numero": "789",
        "complemento": "",
        "cidade": "Belo Horizonte",
        "estado": "MG",
        "cep": "30123-456"
      },
      "telefone": "(31) 5555-5555"
    },
    {
      "nome": "Ana Oliveira",
      "endereco_entrega": {
        "rua": "Avenida D",
        "numero": "987",
        "complemento": "Sala 3",
        "cidade": "Porto Alegre",
        "estado": "RS",
        "cep": "90456-789"
      },
      "telefone": "(51) 98765-4321"
    },
    {
      "nome": "Paulo Santos",
      "endereco_entrega": {
        "rua": "Rua E",
        "numero": "321",
        "complemento": "Casa 1",
        "cidade": "Curitiba",
        "estado": "PR",
        "cep": "80000-321"
      },
      "telefone": "(41) 1234-5678"
    }*/
      {
        "nome": "Maria Silva",
        "endereco_entrega": {
          "rua": "Rua das Flores",
          "numero": "100",
          "complemento": "Apto 2",
          "cidade": "São Paulo",
          "estado": "SP",
          "cep": "01234-567"
        },
        "telefone": "(11) 98765-4321"
      },
      {
        "nome": "Pedro Oliveira",
        "endereco_entrega": {
          "rua": "Avenida Central",
          "numero": "500",
          "complemento": "Casa",
          "cidade": "Rio de Janeiro",
          "estado": "RJ",
          "cep": "98765-432"
        },
        "telefone": "(21) 98765-4321"
      },
      {
        "nome": "Ana Santos",
        "endereco_entrega": {
          "rua": "Rua da Praia",
          "numero": "50",
          "complemento": "",
          "cidade": "Florianópolis",
          "estado": "SC",
          "cep": "12345-678"
        },
        "telefone": "(48) 98765-4321"
      },
      {
        "nome": "Rafaela Souza",
        "endereco_entrega": {
          "rua": "Rua das Palmeiras",
          "numero": "200",
          "complemento": "Apto 10",
          "cidade": "Belo Horizonte",
          "estado": "MG",
          "cep": "56789-012"
        },
        "telefone": "(31) 98765-4321"
      },
      {
        "nome": "Lucas Ferreira",
        "endereco_entrega": {
          "rua": "Avenida dos Sonhos",
          "numero": "300",
          "complemento": "Apto 5",
          "cidade": "Curitiba",
          "estado": "PR",
          "cep": "98765-432"
        },
        "telefone": "(41) 98765-4321"
      }
    
    
  ]);
  
  db.pedidos.insertMany([
    /*{
       "cliente_id": ObjectId("64930f901e3a4390f382613a"),
       "data_hora": ISODate("2023-06-21T18:00:00Z"),
       "tipo_entrega": "entrega",
       "numero_mesa": null,
       "itens": [
          {
             "tipo": "pizza",
             "nome": "Calabresa",
             "quantidade": 2,
             "preco_unitario": 25.99
          },
          {
             "tipo": "bebida",
             "nome": "Coca-Cola",
             "quantidade": 3,
             "preco_unitario": 5.99
          }
       ]
    },
    {
       "cliente_id": ObjectId("64930f901e3a4390f382613a"),
       "data_hora": ISODate("2023-06-21T18:30:00Z"),
       "tipo_entrega": "local",
       "numero_mesa": 4,
       "itens": [
          {
             "tipo": "pizza",
             "nome": "Mussarela",
             "quantidade": 1,
             "preco_unitario": 22.99
          },
          {
             "tipo": "bebida",
             "nome": "Guaraná",
             "quantidade": 2,
             "preco_unitario": 4.99
          }
       ]
    },
    {
       "cliente_id": ObjectId("649348e86d45a362c908cb1d"),
       "data_hora": ISODate("2023-06-21T19:00:00Z"),
       "tipo_entrega": "entrega",
       "numero_mesa": null,
       "itens": [
          {
             "tipo": "pizza",
             "nome": "Portuguesa",
             "quantidade": 2,
             "preco_unitario": 28.99
          },
          {
             "tipo": "bebida",
             "nome": "Fanta",
             "quantidade": 1,
             "preco_unitario": 3.99
          }
       ]
    },
    {
       "cliente_id": ObjectId("649348e86d45a362c908cb1e"),
       "data_hora": ISODate("2023-06-21T18:00:00Z"),
       "tipo_entrega": "entrega",
       "numero_mesa": null,
       "itens": [
          {
             "tipo": "pizza",
             "nome": "Quatro Queijos",
             "quantidade": 1,
             "preco_unitario": 27.99
          },
          {
             "tipo": "bebida",
             "nome": "Sprite",
             "quantidade": 2,
             "preco_unitario": 3.99
          }
       ]
    },
    {
       "cliente_id": ObjectId("649348e86d45a362c908cb20"),
       "data_hora": ISODate("2023-06-21T20:00:00Z"),
       "tipo_entrega": "local",
       "numero_mesa": 2,
       "itens": [
          {
             "tipo": "pizza",
             "nome": "Frango com Catupiry",
             "quantidade": 3,
             "preco_unitario": 26.99
          },
          {
             "tipo": "bebida",
             "nome": "Água Mineral",
             "quantidade": 5,
             "preco_unitario": 2.99
          }
       ]
    }*/
      {
        "cliente_id": "1",
        "data_hora": "2023-06-26 14:30:00",
        "tipo_entrega": "entrega",
        "numero_mesa": null,
        "itens": [
          {
            "tipo": "pizza",
            "nome": "Pizza Margherita",
            "quantidade": 2,
            "preco_unitario": 25.99
          },
          {
            "tipo": "bebida",
            "nome": "Coca-Cola",
            "quantidade": 1,
            "preco_unitario": 5.99
          }
        ]
      },
      {
        "cliente_id": "2",
        "data_hora": "2023-06-26 19:45:00",
        "tipo_entrega": "local",
        "numero_mesa": 5,
        "itens": [
          {
            "tipo": "pizza",
            "nome": "Pizza Calabresa",
            "quantidade": 1,
            "preco_unitario": 28.99
          },
          {
            "tipo": "bebida",
            "nome": "Suco de Laranja",
            "quantidade": 2,
            "preco_unitario": 7.99
          }
        ]
      },
      {
        "cliente_id": "3",
        "data_hora": "2023-06-26 21:15:00",
        "tipo_entrega": "entrega",
        "numero_mesa": null,
        "itens": [
          {
            "tipo": "pizza",
            "nome": "Pizza Quatro Queijos",
            "quantidade": 3,
            "preco_unitario": 31.99
          },
          {
            "tipo": "bebida",
            "nome": "Água Mineral",
            "quantidade": 4,
            "preco_unitario": 3.99
          }
        ]
      },
      {
        "cliente_id": "4",
        "data_hora": "2023-06-26 18:30:00",
        "tipo_entrega": "local",
        "numero_mesa": 3,
        "itens": [
          {
            "tipo": "pizza",
            "nome": "Pizza Portuguesa",
            "quantidade": 2,
            "preco_unitario": 27.99
          },
          {
            "tipo": "bebida",
            "nome": "Cerveja",
            "quantidade": 6,
            "preco_unitario": 8.99
          }
        ]
      },
      {
        "cliente_id": "5",
        "data_hora": "2023-06-26 20:00:00",
        "tipo_entrega": "entrega",
        "numero_mesa": null,
        "itens": [
          {
            "tipo": "pizza",
            "nome": "Pizza Frango com Catupiry",
            "quantidade": 1,
            "preco_unitario": 29.99
          },
          {
            "tipo": "bebida",
            "nome": "Refrigerante",
            "quantidade": 3,
            "preco_unitario": 4.99
          }
        ]
      }
    
 ]);
  
  db.pizzas.insertMany([
    /*{
      "nome": "Calabresa",
      "tamanho": "grande",
      "preco_unitario": 25.99,
      "quantidade": 10
    },
    {
      "nome": "Mussarela",
      "tamanho": "média",
      "preco_unitario": 20.99,
      "quantidade": 5
    },
    {
      "nome": "Portuguesa",
      "tamanho": "grande",
      "preco_unitario": 28.99,
      "quantidade": 8
    },
    {
      "nome": "Quatro Queijos",
      "tamanho": "média",
      "preco_unitario": 27.99,
      "quantidade": 3
    },
    {
      "nome": "Frango com Catupiry",
      "tamanho": "grande",
      "preco_unitario": 26.99,
      "quantidade": 6
    }*/
      {
        "nome": "Pizza Margherita",
        "tamanho": "média",
        "preco_unitario": 25.99,
        "quantidade": 2
      },
      {
        "nome": "Pizza Calabresa",
        "tamanho": "grande",
        "preco_unitario": 28.99,
        "quantidade": 1
      },
      {
        "nome": "Pizza Quatro Queijos",
        "tamanho": "média",
        "preco_unitario": 31.99,
        "quantidade": 3
      },
      {
        "nome": "Pizza Portuguesa",
        "tamanho": "média",
        "preco_unitario": 27.99,
        "quantidade": 2
      },
      {
        "nome": "Pizza Frango com Catupiry",
        "tamanho": "grande",
        "preco_unitario": 29.99,
        "quantidade": 1
      }
    
  ]);
  
  db.bebidas.insertMany([
    /*{
       "nome": "Coca-Cola",
       "preco_unitario": 5.99,
       "quantidade": 20
    },
    {
       "nome": "Guaraná",
       "preco_unitario": 4.99,
       "quantidade": 15
    },
    {
      "nome": "Fanta",
      "preco_unitario": 3.99,
      "quantidade": 12
    },
    {
      "nome": "Sprite",
      "preco_unitario": 3.99,
      "quantidade": 18
    },
    {
      "nome": "Água Mineral",
      "preco_unitario": 2.99,
      "quantidade": 25
    }*/
      {
        "nome": "Coca-Cola",
        "preco_unitario": 5.99,
        "quantidade": 1
      },
      {
        "nome": "Suco de Laranja",
        "preco_unitario": 7.99,
        "quantidade": 2
      },
      {
        "nome": "Água Mineral",
        "preco_unitario": 3.99,
        "quantidade": 4
      },
      {
        "nome": "Cerveja",
        "preco_unitario": 8.99,
        "quantidade": 6
      },
      {
        "nome": "Refrigerante",
        "preco_unitario": 4.99,
        "quantidade": 3
      }
    
    
   
 ]);

  
  

  Comandos MongoDB para realizar atualizações e exclusões de dados. 

  Atualização de um documento na coleção "clientes":
db.clientes.updateOne(
  { "_id": ObjectId("64930f901e3a4390f3826139") },
  { $set: { "telefone": "(11) 999999999" } }
)

Atualização de um documento na coleção "pedidos":
db.pedidos.updateOne(
  { "_id": ObjectId("64930fb51e3a4390f382613b") },
  { $set: { "tipo_entrega": "local" } }
)

Adição de um item em um array de documentos na coleção "pedidos":
db.pedidos.updateOne(
  { "_id": ObjectId("64930fb51e3a4390f382613b") },
  { $push: { "itens": { "tipo": "pizza", "nome": "Margherita", "quantidade": 1, "tamanho": "media", "preco_unitario": 22.99 } } }
)


Remoção de um documento na coleção "clientes":
db.clientes.deleteOne({ "_id": ObjectId("64930f901e3a4390f3826139") })


Remoção de um item de um array de documentos na coleção "pedidos":
db.pedidos.updateOne(
  { "_id": ObjectId("64930fb51e3a4390f382613b") },  
  { $pull: { "itens": { "tipo": "pizza", "nome": "Calabresa" } } }

  
  Comandos MongoDB para as consultas que devem incluir pelo menos uma de cada: consulta simples, consulta com uma condição.

  Consulta simples para retornar todos os documentos da coleção "clientes":
db.clientes.find()


Consulta com uma condição para retornar os pedidos com tipo de entrega igual a "entrega":
db.pedidos.find({ "tipo_entrega": "local" })

Consulta para mostrar os clientes que pediram a pizza Margherita:
db.pedidos.find({ "itens.nome": "Margherita", "itens.tipo": "pizza" })

Consulta para mostrar os clientes que pediram a bebida Coca-Cola:
db.pedidos.find({ "itens.nome": "Coca-Cola", "itens.tipo": "bebida" })

Consulta para mostrar os pedidos que contêm tanto a pizza Margherita quanto a bebida Coca-Cola:
db.pedidos.find({ "itens.nome": { $in: ["Margherita", "Coca-Cola"] } })

Comando MongoDB com 2 consultas usando Aggregate. 
	uma que utilize join e outra que utilize group by.
  Nessa consulta, utilizamos o estágio $lookup para realizar um join entre as coleções pedidos e clientes com base
  no campo cliente_id. Em seguida, utilizamos o estágio $unwind para desagregar o array resultante do join. Por fim,
  utilizamos o estágio $project para projetar apenas os campos desejados.
  db.pedidos.aggregate([
    {
      $lookup: {
        from: "clientes",
        localField: "cliente_id",
        foreignField: "_id",
        as: "cliente"
      }
    },
    {
      $unwind: "$cliente"
    },
    {
      $project: {
        "cliente.nome": 1,
        "cliente.endereco_entrega.cidade": 1,
        "cliente.endereco_entrega.estado": 1,
        "data_hora": 1,
        "tipo_entrega": 1
      }
    }
  ]);

  Nessa consulta, utilizamos o estágio $group para agrupar os documentos da coleção pedidos com base no campo tipo_entrega.
  Em seguida, utilizamos os operadores de agregação $sum e $size para calcular o total de pedidos e o total de itens em cada grupo. 
  O resultado será um documento para cada tipo de entrega, contendo as informações calculadas.
  db.pedidos.aggregate([
    {
      $group: {
        _id: "$tipo_entrega",
        total_pedidos: { $sum: 1 },
        total_itens: { $sum: { $size: "$itens" } }
      }
    }
  ]);
  Para obter o cliente que mais consumiu produtos, podemos utilizar a agregação no MongoDB com o estágio $group para agrupar os pedidos pelo cliente e calcular o total de itens consumidos por cliente. Em seguida, utilizamos o estágio $sort para ordenar os resultados em ordem decrescente com base no total de itens consumidos. Por fim, utilizamos o estágio $limit para obter apenas o primeiro resultado, que será o cliente que mais consumiu produtos. Aqui está o comando:

db.pedidos.aggregate([
  {
    $unwind: "$itens"
  },
  {
    $group: {
      _id: "$cliente_id",
      total_itens: { $sum: "$itens.quantidade" }
    }
  },
  {
    $sort: {
      total_itens: -1
    }
  },
  {
    $limit: 1
  },
  {
    $lookup: {
      from: "clientes",
      localField: "_id",
      foreignField: "_id",
      as: "cliente"
    }
  },
  {
    $unwind: "$cliente"
  },
  {
    $project: {
      "cliente.nome": 1,
      total_itens: 1
    }
  }
]);



Para obter os produtos mais vendidos, também podemos utilizar a agregação com o estágio $group para agrupar os itens por nome do produto e calcular a quantidade total vendida de cada produto. Em seguida, utilizamos o estágio $sort para ordenar os resultados em ordem decrescente com base na quantidade total vendida. Por fim, utilizamos o estágio $limit para obter apenas os primeiros resultados, que serão os produtos mais vendidos. Aqui está o comando:

db.pedidos.aggregate([
  {
    $unwind: "$itens"
  },
  {
    $group: {
      _id: "$itens.nome",
      quantidade_total: { $sum: "$itens.quantidade" }
    }
  },
  {
    $sort: {
      quantidade_total: -1
    }
  },
  {
    $limit: 5
  }
]);


Índices apropriados para melhorar o desempenho das consultas. Explicar por que desses índices.
Índice para busca por nome do cliente:
db.clientes.createIndex({ "nome": 1 })
Esse índice ajudará a otimizar as consultas que buscam clientes com base no nome.


Índice para busca por pizzas mais consumidas:
db.pizzas.createIndex({ "quantidade": -1 })
Esse índice ordena as pizzas com base na quantidade, permitindo que você recupere as pizzas mais consumidas com mais eficiência.


Índice para busca por bebidas mais consumidas:
db.bebidas.createIndex({ "quantidade": -1 })
Esse índice ordena as bebidas com base na quantidade, permitindo que você recupere as bebidas mais consumidas com mais eficiência.

Índice para busca por valores:
db.pizzas.createIndex({ "preco_unitario": 1 })
db.bebidas.createIndex({ "preco_unitario": 1 })
Esses índices ajudam a otimizar consultas que envolvem a busca por pizzas ou bebidas com base no preço unitário.
